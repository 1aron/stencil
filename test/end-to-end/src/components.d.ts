/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { JSXElements } from '@stencil/core';




export namespace Components {

  interface AppRoot {}
  interface AppRootAttributes extends JSXElements.HTMLAttributes {}

  interface CarDetail {}
  interface CarDetailAttributes extends JSXElements.HTMLAttributes {}

  interface CarList {}
  interface CarListAttributes extends JSXElements.HTMLAttributes {}

  interface DomApi {}
  interface DomApiAttributes extends JSXElements.HTMLAttributes {}

  interface DomInteraction {}
  interface DomInteractionAttributes extends JSXElements.HTMLAttributes {}

  interface DomVisible {}
  interface DomVisibleAttributes extends JSXElements.HTMLAttributes {}

  interface ElementCmp {}
  interface ElementCmpAttributes extends JSXElements.HTMLAttributes {}

  interface EventCmp {}
  interface EventCmpAttributes extends JSXElements.HTMLAttributes {}

  interface ListenCmp {}
  interface ListenCmpAttributes extends JSXElements.HTMLAttributes {}

  interface MethodCmp {}
  interface MethodCmpAttributes extends JSXElements.HTMLAttributes {}

  interface PropCmp {}
  interface PropCmpAttributes extends JSXElements.HTMLAttributes {}

  interface StateCmp {}
  interface StateCmpAttributes extends JSXElements.HTMLAttributes {}
}

declare global {
  interface StencilElementInterfaces {
    'AppRoot': Components.AppRoot;
    'CarDetail': Components.CarDetail;
    'CarList': Components.CarList;
    'DomApi': Components.DomApi;
    'DomInteraction': Components.DomInteraction;
    'DomVisible': Components.DomVisible;
    'ElementCmp': Components.ElementCmp;
    'EventCmp': Components.EventCmp;
    'ListenCmp': Components.ListenCmp;
    'MethodCmp': Components.MethodCmp;
    'PropCmp': Components.PropCmp;
    'StateCmp': Components.StateCmp;
  }

  interface StencilIntrinsicElements {
    'app-root': Components.AppRootAttributes;
    'car-detail': Components.CarDetailAttributes;
    'car-list': Components.CarListAttributes;
    'dom-api': Components.DomApiAttributes;
    'dom-interaction': Components.DomInteractionAttributes;
    'dom-visible': Components.DomVisibleAttributes;
    'element-cmp': Components.ElementCmpAttributes;
    'event-cmp': Components.EventCmpAttributes;
    'listen-cmp': Components.ListenCmpAttributes;
    'method-cmp': Components.MethodCmpAttributes;
    'prop-cmp': Components.PropCmpAttributes;
    'state-cmp': Components.StateCmpAttributes;
  }


  interface HTMLAppRootElement extends Components.AppRoot, HTMLElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLCarDetailElement extends Components.CarDetail, HTMLElement {}
  var HTMLCarDetailElement: {
    prototype: HTMLCarDetailElement;
    new (): HTMLCarDetailElement;
  };

  interface HTMLCarListElement extends Components.CarList, HTMLElement {}
  var HTMLCarListElement: {
    prototype: HTMLCarListElement;
    new (): HTMLCarListElement;
  };

  interface HTMLDomApiElement extends Components.DomApi, HTMLElement {}
  var HTMLDomApiElement: {
    prototype: HTMLDomApiElement;
    new (): HTMLDomApiElement;
  };

  interface HTMLDomInteractionElement extends Components.DomInteraction, HTMLElement {}
  var HTMLDomInteractionElement: {
    prototype: HTMLDomInteractionElement;
    new (): HTMLDomInteractionElement;
  };

  interface HTMLDomVisibleElement extends Components.DomVisible, HTMLElement {}
  var HTMLDomVisibleElement: {
    prototype: HTMLDomVisibleElement;
    new (): HTMLDomVisibleElement;
  };

  interface HTMLElementCmpElement extends Components.ElementCmp, HTMLElement {}
  var HTMLElementCmpElement: {
    prototype: HTMLElementCmpElement;
    new (): HTMLElementCmpElement;
  };

  interface HTMLEventCmpElement extends Components.EventCmp, HTMLElement {}
  var HTMLEventCmpElement: {
    prototype: HTMLEventCmpElement;
    new (): HTMLEventCmpElement;
  };

  interface HTMLListenCmpElement extends Components.ListenCmp, HTMLElement {}
  var HTMLListenCmpElement: {
    prototype: HTMLListenCmpElement;
    new (): HTMLListenCmpElement;
  };

  interface HTMLMethodCmpElement extends Components.MethodCmp, HTMLElement {}
  var HTMLMethodCmpElement: {
    prototype: HTMLMethodCmpElement;
    new (): HTMLMethodCmpElement;
  };

  interface HTMLPropCmpElement extends Components.PropCmp, HTMLElement {}
  var HTMLPropCmpElement: {
    prototype: HTMLPropCmpElement;
    new (): HTMLPropCmpElement;
  };

  interface HTMLStateCmpElement extends Components.StateCmp, HTMLElement {}
  var HTMLStateCmpElement: {
    prototype: HTMLStateCmpElement;
    new (): HTMLStateCmpElement;
  };

  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement
    'car-detail': HTMLCarDetailElement
    'car-list': HTMLCarListElement
    'dom-api': HTMLDomApiElement
    'dom-interaction': HTMLDomInteractionElement
    'dom-visible': HTMLDomVisibleElement
    'element-cmp': HTMLElementCmpElement
    'event-cmp': HTMLEventCmpElement
    'listen-cmp': HTMLListenCmpElement
    'method-cmp': HTMLMethodCmpElement
    'prop-cmp': HTMLPropCmpElement
    'state-cmp': HTMLStateCmpElement
  }

  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
    'car-detail': HTMLCarDetailElement;
    'car-list': HTMLCarListElement;
    'dom-api': HTMLDomApiElement;
    'dom-interaction': HTMLDomInteractionElement;
    'dom-visible': HTMLDomVisibleElement;
    'element-cmp': HTMLElementCmpElement;
    'event-cmp': HTMLEventCmpElement;
    'listen-cmp': HTMLListenCmpElement;
    'method-cmp': HTMLMethodCmpElement;
    'prop-cmp': HTMLPropCmpElement;
    'state-cmp': HTMLStateCmpElement;
  }

}
