/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import { JSX } from '@stencil/core';
import {
  CarData,
} from './car-list/car-data';


export namespace Components {
  interface AppRoot {}
  interface CarDetail {
    'car': CarData;
  }
  interface CarList {
    'cars': CarData[];
    'selected': CarData;
  }
  interface DomApi {}
  interface DomInteraction {}
  interface DomVisible {}
  interface ElementCmp {}
  interface EventCmp {
    'methodThatFiresEventWithOptions': () => Promise<void>;
    'methodThatFiresMyDocumentEvent': () => Promise<void>;
    'methodThatFiresMyWindowEvent': (value: number) => Promise<void>;
  }
  interface ListenCmp {
    'opened': boolean;
  }
  interface MethodCmp {
    'someMethod': () => Promise<number>;
    'someMethodWithArgs': (unit: string, value: number) => Promise<string>;
    'someProp': number;
  }
  interface PropCmp {
    'first': string;
    'lastName': string;
  }
  interface StateCmp {}
}

declare namespace LocalJSX {
  interface AppRoot extends JSXBase.HTMLAttributes {}
  interface CarDetail extends JSXBase.HTMLAttributes {
    'car'?: CarData;
  }
  interface CarList extends JSXBase.HTMLAttributes {
    'cars'?: CarData[];
    'onCarSelected'?: (event: CustomEvent<CarData>) => void;
    'selected'?: CarData;
  }
  interface DomApi extends JSXBase.HTMLAttributes {}
  interface DomInteraction extends JSXBase.HTMLAttributes {}
  interface DomVisible extends JSXBase.HTMLAttributes {}
  interface ElementCmp extends JSXBase.HTMLAttributes {}
  interface EventCmp extends JSXBase.HTMLAttributes {
    'onMy-event-with-options'?: (event: CustomEvent<{ mph: number }>) => void;
    'onMyDocumentEvent'?: (event: CustomEvent<any>) => void;
    'onMyWindowEvent'?: (event: CustomEvent<number>) => void;
  }
  interface ListenCmp extends JSXBase.HTMLAttributes {
    'opened'?: boolean;
  }
  interface MethodCmp extends JSXBase.HTMLAttributes {
    'someProp'?: number;
  }
  interface PropCmp extends JSXBase.HTMLAttributes {
    'first'?: string;
    'lastName'?: string;
  }
  interface StateCmp extends JSXBase.HTMLAttributes {}

  interface ElementInterfaces {
    'AppRoot': Components.AppRoot;
    'CarDetail': Components.CarDetail;
    'CarList': Components.CarList;
    'DomApi': Components.DomApi;
    'DomInteraction': Components.DomInteraction;
    'DomVisible': Components.DomVisible;
    'ElementCmp': Components.ElementCmp;
    'EventCmp': Components.EventCmp;
    'ListenCmp': Components.ListenCmp;
    'MethodCmp': Components.MethodCmp;
    'PropCmp': Components.PropCmp;
    'StateCmp': Components.StateCmp;
  }

  interface IntrinsicElements {
    'AppRoot': LocalJSX.AppRoot;
    'CarDetail': LocalJSX.CarDetail;
    'CarList': LocalJSX.CarList;
    'DomApi': LocalJSX.DomApi;
    'DomInteraction': LocalJSX.DomInteraction;
    'DomVisible': LocalJSX.DomVisible;
    'ElementCmp': LocalJSX.ElementCmp;
    'EventCmp': LocalJSX.EventCmp;
    'ListenCmp': LocalJSX.ListenCmp;
    'MethodCmp': LocalJSX.MethodCmp;
    'PropCmp': LocalJSX.PropCmp;
    'StateCmp': LocalJSX.StateCmp;
  }
}
export { LocalJSX as JSX };

declare module "@stencil/core" {
  export namespace JSX {
    interface ElementInterfaces extends LocalJSX.ElementInterfaces {}
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}

declare global {

  interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {}
  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };

  interface HTMLCarDetailElement extends Components.CarDetail, HTMLStencilElement {}
  var HTMLCarDetailElement: {
    prototype: HTMLCarDetailElement;
    new (): HTMLCarDetailElement;
  };

  interface HTMLCarListElement extends Components.CarList, HTMLStencilElement {}
  var HTMLCarListElement: {
    prototype: HTMLCarListElement;
    new (): HTMLCarListElement;
  };

  interface HTMLDomApiElement extends Components.DomApi, HTMLStencilElement {}
  var HTMLDomApiElement: {
    prototype: HTMLDomApiElement;
    new (): HTMLDomApiElement;
  };

  interface HTMLDomInteractionElement extends Components.DomInteraction, HTMLStencilElement {}
  var HTMLDomInteractionElement: {
    prototype: HTMLDomInteractionElement;
    new (): HTMLDomInteractionElement;
  };

  interface HTMLDomVisibleElement extends Components.DomVisible, HTMLStencilElement {}
  var HTMLDomVisibleElement: {
    prototype: HTMLDomVisibleElement;
    new (): HTMLDomVisibleElement;
  };

  interface HTMLElementCmpElement extends Components.ElementCmp, HTMLStencilElement {}
  var HTMLElementCmpElement: {
    prototype: HTMLElementCmpElement;
    new (): HTMLElementCmpElement;
  };

  interface HTMLEventCmpElement extends Components.EventCmp, HTMLStencilElement {}
  var HTMLEventCmpElement: {
    prototype: HTMLEventCmpElement;
    new (): HTMLEventCmpElement;
  };

  interface HTMLListenCmpElement extends Components.ListenCmp, HTMLStencilElement {}
  var HTMLListenCmpElement: {
    prototype: HTMLListenCmpElement;
    new (): HTMLListenCmpElement;
  };

  interface HTMLMethodCmpElement extends Components.MethodCmp, HTMLStencilElement {}
  var HTMLMethodCmpElement: {
    prototype: HTMLMethodCmpElement;
    new (): HTMLMethodCmpElement;
  };

  interface HTMLPropCmpElement extends Components.PropCmp, HTMLStencilElement {}
  var HTMLPropCmpElement: {
    prototype: HTMLPropCmpElement;
    new (): HTMLPropCmpElement;
  };

  interface HTMLStateCmpElement extends Components.StateCmp, HTMLStencilElement {}
  var HTMLStateCmpElement: {
    prototype: HTMLStateCmpElement;
    new (): HTMLStateCmpElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement
    'car-detail': HTMLCarDetailElement
    'car-list': HTMLCarListElement
    'dom-api': HTMLDomApiElement
    'dom-interaction': HTMLDomInteractionElement
    'dom-visible': HTMLDomVisibleElement
    'element-cmp': HTMLElementCmpElement
    'event-cmp': HTMLEventCmpElement
    'listen-cmp': HTMLListenCmpElement
    'method-cmp': HTMLMethodCmpElement
    'prop-cmp': HTMLPropCmpElement
    'state-cmp': HTMLStateCmpElement
  }

  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
    'car-detail': HTMLCarDetailElement;
    'car-list': HTMLCarListElement;
    'dom-api': HTMLDomApiElement;
    'dom-interaction': HTMLDomInteractionElement;
    'dom-visible': HTMLDomVisibleElement;
    'element-cmp': HTMLElementCmpElement;
    'event-cmp': HTMLEventCmpElement;
    'listen-cmp': HTMLListenCmpElement;
    'method-cmp': HTMLMethodCmpElement;
    'prop-cmp': HTMLPropCmpElement;
    'state-cmp': HTMLStateCmpElement;
  }
}

