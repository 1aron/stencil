
// Appearance
// --------------------------------------------------

@mixin appearance($val) {
  -moz-appearance: $val;
  -ms-appearance: $val;
  -webkit-appearance: $val;
  appearance: $val;
}


// Button Cover
// --------------------------------------------------

@mixin button-cover() {
  border: 0;

  font-family: inherit;
  font-style: inherit;
  font-variant: inherit;

  line-height: 1;
  text-transform: none;

  cursor: pointer;
  -webkit-appearance: button;
}


// Item Cover
// --------------------------------------------------

@mixin item-cover() {
  position: absolute;
  top: 0;
  left: 0;

  width: 100%;
  height: 100%;

  background: transparent;
  cursor: pointer;
}


// Input Placeholder
// --------------------------------------------------

@mixin placeholder($color: #999, $text-indent: 0) {
  &::-moz-placeholder { // Firefox 19+
    color: $color;
  }

  &:-ms-input-placeholder {
    color: $color;
  }

  &::-webkit-input-placeholder {
    // Safari placeholder margin issue
    text-indent: $text-indent;
    color: $color;
  }
}


// SVG Background Image Mixin
// --------------------------------------------------

@mixin svg-background-image($svg) {
  $url: url-encode($svg);
  background-image: url("data:image/svg+xml;charset=utf-8,#{$url}");
}

// Check that the given map values are in ascending order
// ---------------------------------------------------------------------------------

@mixin assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Check that the first value in the given map starts at 0
// ---------------------------------------------------------------------------------

@mixin assert-starts-at-zero($map, $map-name) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First value in `#{$map-name}` must start at 0, but starts at #{$first-value}.";
  }
}


// Content Padding
// --------------------------------------------------

@mixin content-padding($mode, $content-padding) {
  #{$mode} [padding] {
    padding: $content-padding;
  }

  #{$mode} [padding-top] {
    padding-top: $content-padding;
  }

  #{$mode} [padding-left] {
    padding-left: $content-padding;
  }

  #{$mode} [padding-right] {
    padding-right: $content-padding;
  }

  #{$mode} [padding-bottom] {
    padding-bottom: $content-padding;
  }

  #{$mode} [padding-vertical] {
    padding-top: $content-padding;
    padding-bottom: $content-padding;
  }

  #{$mode} [padding-horizontal] {
    padding-right: $content-padding;
    padding-left: $content-padding;
  }
}


// Content Margin
// --------------------------------------------------

@mixin content-margin($mode, $content-margin) {
  #{$mode} [margin] {
    margin: $content-margin;
  }

  #{$mode} [margin-top] {
    margin-top: $content-margin;
  }

  #{$mode} [margin-left] {
    margin-left: $content-margin;
  }

  #{$mode} [margin-right] {
    margin-right: $content-margin;
  }

  #{$mode} [margin-bottom] {
    margin-bottom: $content-margin;
  }

  #{$mode} [margin-vertical] {
    margin-top: $content-margin;
    margin-bottom: $content-margin;
  }

  #{$mode} [margin-horizontal] {
    margin-right: $content-margin;
    margin-left: $content-margin;
  }
}
