import * as d from '../../declarations';
import { bundleApp } from '../app-core/bundle-app-core';
import { getBuildFeatures, updateBuildConditionals } from '../app-core/build-conditionals';
import { isOutputTargetHydrate } from '../output-targets/output-utils';
import { generateEsm } from './generate-esm';
import { generateSystem } from './generate-system';
import { generateCjs } from './generate-cjs';

export async function generateLazyLoadedApp(config: d.Config, compilerCtx: d.CompilerCtx, buildCtx: d.BuildCtx, outputTargets: d.OutputTargetDistLazy[], cmps: d.ComponentCompilerMeta[]) {
  const timespan = buildCtx.createTimeSpan(`generate lazy components started`);

  const build = getBuildConditionals(config, cmps);
  const rollupBuild = await bundleLazyApp(config, compilerCtx, buildCtx, build);

  await buildCtx.stylesPromise;

  await Promise.all([
    generateEsm(config, compilerCtx, buildCtx, build, rollupBuild, outputTargets),
    generateSystem(config, compilerCtx, buildCtx, build, rollupBuild, outputTargets),
    generateCjs(config, compilerCtx, buildCtx, build, rollupBuild, outputTargets)
  ]);

  timespan.finish(`generate lazy components finished`);
}

function getBuildConditionals(config: d.Config, cmps: d.ComponentCompilerMeta[]) {
  const build = getBuildFeatures(cmps) as d.Build;

  build.lazyLoad = true;
  build.es5 = false;
  build.polyfills = false;
  build.hydrateServerSide = false;

  const hasHydrateOutputTargets = config.outputTargets.some(isOutputTargetHydrate);
  build.hydrateClientSide = hasHydrateOutputTargets;

  updateBuildConditionals(config, build);

  return build;
}

async function bundleLazyApp(config: d.Config, compilerCtx: d.CompilerCtx, buildCtx: d.BuildCtx, build: d.Build) {
  const loader: any = {
    '@stencil/core/app': CORE,
    '@core-entrypoint': BROWSER_ENTRY,
    '@external-entrypoint': EXTERNAL_ENTRY,
  };

  // Provide an empty index.js if the projects does not provide one
  const usersIndexJsPath = config.sys.path.join(config.srcDir, 'index.js');
  const hasUserDefinedIndex = await compilerCtx.fs.access(usersIndexJsPath);
  if (!hasUserDefinedIndex) {
    // We can use the loader rollup plugin to inject content to the "index" chunk
    loader['index'] = `// Autogenerated index`;
  }

  const bundleCoreOptions: d.BundleCoreOptions = {
    loader,
    entryInputs: {
      [config.fsNamespace]: '@core-entrypoint',
      'loader': '@external-entrypoint',
      'index': usersIndexJsPath
    },
    coreChunk: true,
    cache: compilerCtx.lazyModuleRollupCache
  };

  buildCtx.entryModules.forEach(entryModule => {
    bundleCoreOptions.entryInputs[entryModule.entryKey] = entryModule.entryKey;
  });
  const rollupBuild = await bundleApp(config, compilerCtx, buildCtx, build, bundleCoreOptions);
  compilerCtx.lazyModuleRollupCache = rollupBuild.cache;
  return rollupBuild;
}

const CORE = `
import { bootstrapLazy } from '@stencil/core/platform';
import globalScripts from '@stencil/core/global-scripts';
export * from '@stencil/core/platform';
export const defineCustomElements = win => {
  globalScripts(win);
  bootstrapLazy([/*!__STENCIL_LAZY_DATA__*/]);
};
`;

const BROWSER_ENTRY = `
import { defineCustomElements } from '@stencil/core/app';
defineCustomElements(window);
`;

// This is for webpack
const EXTERNAL_ENTRY = `
export { defineCustomElements } from '@stencil/core/app';
`;
