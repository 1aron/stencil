#!/usr/bin/env node

'use strict';

process.title = 'stencil';
process.on('unhandledRejection', function(r) { console.error(r) });
process.env.IONIC_CLI_BIN = __filename;


var chalk = require('chalk');
var path = require('path');

if (require('semver').lt(process.version, 'v6.4.0')) {
  console.log('ERR' + ': Your Node.js version is ' + chalk.bold(process.version) + '. Please update to the latest Node 6 LTS version (or latest Node).');
  process.exit(1);
}

var cmdArgs = process.argv;
try {
  var npmRunArgs = process.env.npm_config_argv;
  if (npmRunArgs) {
    cmdArgs = cmdArgs.concat(JSON.parse(npmRunArgs).original);
  }
} catch (e) {}


var config = {
  process: process,
  sys: require('./sys')
};


var configFileName = 'stencil.config.js';

var projectConfigFileNameCmdIndex = cmdArgs.indexOf('--config');
if (projectConfigFileNameCmdIndex > -1) {
  configFileName = cmdArgs[projectConfigFileNameCmdIndex + 1];

} else {
  projectConfigFileNameCmdIndex = cmdArgs.indexOf('-c');
  if (projectConfigFileNameCmdIndex > -1) {
    configFileName = cmdArgs[projectConfigFileNameCmdIndex + 1];
  }
}

var configFilePath = configFileName;
if (!path.isAbsolute(configFilePath)) {
  configFilePath = path.join(process.cwd(), configFilePath);
}

config.rootDir = path.dirname(configFilePath);


try {
  var configFile = require(configFilePath);

  if (!configFile.config) {
    console.log('Invalid Stencil "' + chalk.bold(configFilePath) + '" configuration file. Missing "config" property.');
    process.exit(1);
  }

  Object.assign(config, configFile.config);

} catch(e) {
  console.log('Error reading Stencil "' + chalk.bold(configFilePath) + '" configuration file.');
  process.exit(1);
}


if (cmdArgs.indexOf('--prod') > -1 || cmdArgs.indexOf('-p') > -1) {
  config.devMode = false;
}

if (cmdArgs.indexOf('--watch') > -1 || cmdArgs.indexOf('-w') > -1) {
  config.watch = true;
}

if (cmdArgs.indexOf('--debug') > -1) {
  config.logLevel = 'debug';

} else {
  var logLevelCmdIndex = cmdArgs.indexOf('--log-level');
  if (logLevelCmdIndex > -1) {
    config.logLevel = cmdArgs[logLevelCmdIndex + 1];
  }
}


var stencil = require(path.join(__dirname, '..', 'dist' , 'compiler'));
config.logger = new stencil.CommandLineLogger({
  level: config.logLevel,
  process: process,
  chalk: chalk
});


switch (cmdArgs[2]) {
  case 'build':
    stencil.build(config);
    break;

  default:
    console.log('Invalid stencil command' + (cmdArgs[2] ? ': "' + cmdArgs[2] + '"' : ''));
    process.exit(1);
}
